<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小鑫</title>
  
  <subtitle>小鑫的技术专栏</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xiaoxin101.github.io/"/>
  <updated>2019-06-10T08:43:59.311Z</updated>
  <id>http://xiaoxin101.github.io/</id>
  
  <author>
    <name>小鑫</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>spring mvc对接ueditor富文本编辑器</title>
    <link href="http://xiaoxin101.github.io/2019/06/10/ueditor/"/>
    <id>http://xiaoxin101.github.io/2019/06/10/ueditor/</id>
    <published>2019-06-10T06:09:04.671Z</published>
    <updated>2019-06-10T08:43:59.311Z</updated>
    
    <content type="html"><![CDATA[<p>工作中需要用到UEditor编辑文本，在与springMVC进行整合时，出现了一些问题，结果导致，在进行图片上传时出现如下提示：<br><img src="https://s2.ax1x.com/2019/06/10/VyHALd.png" alt><br>上网查询了很多相关资料，此处简要记录下，防止以后遇到类似问题。</p><p> 一种方式是直接修改源码，步骤如下：</p><p>1、编写controller 如下（该接口是ueditor前后台交互的统一路径） ：<br>复制代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package com.test.dcdp.controller;</span><br><span class="line">&#123;captureBefore&#125; [ ]</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.PrintWriter;</span><br><span class="line">&#123;captureBefore&#125; [ ]</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">&#123;captureBefore&#125; [ ]</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">&#123;captureBefore&#125; [ ]</span><br><span class="line">import com.baidu.ueditor.ActionEnter;</span><br><span class="line">&#123;captureBefore&#125; [ ]</span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/ueditor&quot;)</span><br><span class="line">public class UeditorController &#123;</span><br><span class="line">&#123;captureBefore&#125; [ ]</span><br><span class="line">    @RequestMapping(&quot;/dispatch&quot;)</span><br><span class="line">    public void config(HttpServletRequest request,  HttpServletResponse response) &#123;</span><br><span class="line">           // response.setContentType(&quot;application/json&quot;);</span><br><span class="line">            String rootPath = request.getSession().getServletContext().getRealPath(&quot;/&quot;);</span><br><span class="line">            response.setHeader(&quot;Content-Type&quot; , &quot;text/html&quot;);</span><br><span class="line">            try &#123;</span><br><span class="line">                String a = request.getRequestURI();</span><br><span class="line">                    String exec = new ActionEnter(request, rootPath).exec();</span><br><span class="line">                    PrintWriter writer = response.getWriter();</span><br><span class="line">                    writer.write(exec);</span><br><span class="line">                    writer.flush();</span><br><span class="line">                    writer.close();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、修改ueditor的配置文件 ueditor.config.js（指定后台服务器地址）,如下所示</p><p>修改前：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var URL = window.UEDITOR_HOME_URL || getUEBasePath();</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 配置项主体。注意，此处所有涉及到路径的配置别遗漏URL变量。</span><br><span class="line">    */</span><br><span class="line">   window.UEDITOR_CONFIG = &#123;</span><br><span class="line"></span><br><span class="line">       //为编辑器实例添加一个路径，这个不能被注释</span><br><span class="line">       UEDITOR_HOME_URL: URL</span><br><span class="line"></span><br><span class="line">       // 服务器统一请求接口路径</span><br><span class="line">       , serverUrl: URL + &quot;php/controller.php&quot;</span><br></pre></td></tr></table></figure><p>修改后 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">var getRootPath = function ()&#123;</span><br><span class="line">       //获取当前网址</span><br><span class="line">       var curWwwPath=window.document.location.href;</span><br><span class="line">       //获取主机地址之后的目录</span><br><span class="line">       var pathName=window.document.location.pathname;</span><br><span class="line"></span><br><span class="line">       var pos=curWwwPath.indexOf(pathName);</span><br><span class="line">       //获取主机地址</span><br><span class="line">       var localhostPaht=curWwwPath.substring(0,pos);</span><br><span class="line">       //获取带&quot;/&quot;的项目名，如：/uimcardprj</span><br><span class="line">       var projectName=pathName.substring(0,pathName.substr(1).indexOf(&apos;/&apos;)+1);</span><br><span class="line"></span><br><span class="line">       return(localhostPaht+projectName);</span><br><span class="line">   &#125;</span><br><span class="line">   //获取路径</span><br><span class="line">   var applicationPath = getRootPath();</span><br><span class="line">   var URL = window.UEDITOR_HOME_URL || getUEBasePath();</span><br><span class="line">   var serverURL = applicationPath;</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 配置项主体。注意，此处所有涉及到路径的配置别遗漏URL变量。</span><br><span class="line">    */</span><br><span class="line">   window.UEDITOR_CONFIG = &#123;</span><br><span class="line"></span><br><span class="line">       //为编辑器实例添加一个路径，这个不能被注释</span><br><span class="line">       UEDITOR_HOME_URL: URL</span><br><span class="line"></span><br><span class="line">       // 服务器统一请求接口路径</span><br><span class="line">       , serverUrl: serverURL + &quot;ueditor/dispatch&quot;</span><br></pre></td></tr></table></figure><p>3、修改ueditor源码 ConfigManager.java（指定配置文件路径）.</p><p>修改前 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">     * 通过一个给定的路径构建一个配置管理器， 该管理器要求地址路径所在目录下必须存在config.properties文件</span><br><span class="line">     */</span><br><span class="line">    private ConfigManager ( String rootPath, String contextPath, String uri ) throws FileNotFoundException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        rootPath = rootPath.replace( &quot;\\&quot;, &quot;/&quot; );</span><br><span class="line"></span><br><span class="line">        this.rootPath = rootPath;</span><br><span class="line">        this.contextPath = contextPath;</span><br><span class="line"></span><br><span class="line">        if ( contextPath.length() &gt; 0 ) &#123;</span><br><span class="line">            this.originalPath = this.rootPath + uri.substring( contextPath.length() );</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            this.originalPath = this.rootPath + uri;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        this.initEnv();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>修改后 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">   * 通过一个给定的路径构建一个配置管理器， 该管理器要求地址路径所在目录下必须存在config.properties文件</span><br><span class="line">   */</span><br><span class="line">  private ConfigManager ( String rootPath, String contextPath, String uri ) throws FileNotFoundException, IOException &#123;</span><br><span class="line"></span><br><span class="line">      rootPath = rootPath.replace( &quot;\\&quot;, &quot;/&quot; );</span><br><span class="line"></span><br><span class="line">      this.rootPath = rootPath;</span><br><span class="line">      this.contextPath = contextPath;</span><br><span class="line"></span><br><span class="line">      /*if ( contextPath.length() &gt; 0 ) &#123;</span><br><span class="line">          this.originalPath = this.rootPath + uri.substring( contextPath.length() );</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">          this.originalPath = this.rootPath + uri;</span><br><span class="line">      &#125;*/</span><br><span class="line"></span><br><span class="line">      this.originalPath = rootPath + &quot;static&quot; + File.separator + &quot;lib&quot; + File.separator +</span><br><span class="line">              &quot;ueditor&quot; + File.separator + &quot;1.4.3&quot; + File.separator + &quot;jsp&quot; + File.separator + &quot;controller.jsp&quot;;</span><br><span class="line">      ///EdwManage/src/main/webapp/static/lib/ueditor/1.4.3/jsp/controller.jsp</span><br><span class="line"></span><br><span class="line">      this.initEnv();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>  如上所述，主要修改 originalPath 的路径，否则ueditor的配置文件（ueditor_config.json）路径是错误的（与springMVC整合的情况），之所以向上面那样拼接路径，是因为我的ueditor相关文件拷贝在了（EdwManage/src/main/webapp/static/lib/ueditor/1.4.3/jsp/controller.jsp）路径里。</p><p>  4、（若未执行该步操作，在选择好图片后，点击上传，将提示 ： “未找到上传文件”）由于上传的文件都会被springmvc的文件上传拦截器拦截，包装，这样百度编辑器接收到文件后不能识别文件格式，因此把spring默认的commonsMultiparResolver，替换成我们自己写的commonsMultiparResolver ，并修改配置文件。</p><p> 重写CommonsMultipartResolver :<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> package com.tianwen.dcdp.common;</span><br><span class="line"></span><br><span class="line">import org.springframework.web.multipart.commons.CommonsMultipartResolver;</span><br><span class="line"></span><br><span class="line">public class CommonsMultiparResolver extends CommonsMultipartResolver &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">      public boolean isMultipart(javax.servlet.http.HttpServletRequest request) &#123;</span><br><span class="line">       String uri = request.getRequestURI();</span><br><span class="line">       System.out.println(uri);</span><br><span class="line">       //过滤使用百度UEditor的URI</span><br><span class="line">       if (uri.indexOf(&quot;ueditor/dispatch&quot;) &gt; 0) &#123;     //此处拦截路径即为上面编写的controller路径</span><br><span class="line">        System.out.println(&quot;commonsMultipartResolver 放行&quot;);</span><br><span class="line">        return false;</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(&quot;commonsMultipartResolver 拦截&quot;);</span><br><span class="line">       return super.isMultipart(request);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改springMVC配置文件spring-mvc.xml ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 修改为我们重写的CommonsMultiparResolver而不是spring提供的 --&gt;</span><br><span class="line">   &lt;bean id=&quot;multipartResolver&quot;</span><br><span class="line">       class=&quot;com.tianwen.dcdp.common.CommonsMultiparResolver&quot;&gt;</span><br><span class="line">       &lt;!-- 默认编码 --&gt;</span><br><span class="line">       &lt;property name=&quot;defaultEncoding&quot; value=&quot;utf-8&quot; /&gt;</span><br><span class="line">       &lt;!-- 文件大小最大值 --&gt;</span><br><span class="line">       &lt;property name=&quot;maxUploadSize&quot; value=&quot;10485760000&quot; /&gt;</span><br><span class="line">       &lt;!-- 内存中的最大值 --&gt;</span><br><span class="line">       &lt;property name=&quot;maxInMemorySize&quot; value=&quot;40960&quot; /&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>5、最后配置上传文件保存目录，修改ueditor配置文件（ueditor_config.json）：</p><p>修改如下参数（即配置上传文件的URL路径，若配置不正确，富文本编辑器中将不能正确显示上传的图片）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;imageUrlPrefix&quot;: &quot;http://localhost:80/EdwManage&quot;, /* 图片访问路径前缀 */</span><br><span class="line">&quot;imagePathFormat&quot;: &quot;/static/upload/image/&#123;yyyy&#125;&#123;mm&#125;&#123;dd&#125;/&#123;time&#125;&#123;rand:6&#125;&quot;, /* 上传保存路径,可以自定义保存路径和文件名格式 */</span><br></pre></td></tr></table></figure><p>此处 imagePathFormat 之所以配置为如上格式，是因为springMVC中，指定了static目录下的资源为静态资源（其他路径都会被springMVC拦截）。</p><p>文件默认保存的物理路径为： web应用根路径 + imagePathFormat 。</p><p>{yyyy}{mm}{dd} ： 按天分类保存</p><p>{time}{rand:6} ： 随机生成文件名</p><p>另外还有一种简单的解决办法：</p><p>1、新建一web工程(ueditor)。</p><p>2、将下载下来的ueditor文件拷贝到新建工程 的webapps目录下,可参考官网介绍。</p><p>3、在使用ueditor的工程中，修改ueditor配置文件（ueditor.config.js）如下 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">window.UEDITOR_HOME_URL = &quot;http://localhost/ueditor/&quot;;</span><br><span class="line">    var URL = window.UEDITOR_HOME_URL || getUEBasePath();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 配置项主体。注意，此处所有涉及到路径的配置别遗漏URL变量。</span><br><span class="line">     */</span><br><span class="line">    window.UEDITOR_CONFIG = &#123;</span><br><span class="line"></span><br><span class="line">        //为编辑器实例添加一个路径，这个不能被注释</span><br><span class="line">        UEDITOR_HOME_URL: URL</span><br><span class="line"></span><br><span class="line">        // 服务器统一请求接口路径</span><br><span class="line">        , serverUrl: URL+ &quot;jsp/controller.jsp&quot;</span><br></pre></td></tr></table></figure><p>3、配置上传文件保存路径，修改（ueditor_config.json） ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;imageUrlPrefix&quot;: &quot;http://localhost:80/ueditor&quot;, /* 图片访问路径前缀 */</span><br><span class="line">  &quot;imagePathFormat&quot;: &quot;/upload/image/&#123;yyyy&#125;&#123;mm&#125;&#123;dd&#125;/&#123;time&#125;&#123;rand:6&#125;&quot;, /* 上传保存路径,可以自定义保存路径和文件名格式 */</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;工作中需要用到UEditor编辑文本，在与springMVC进行整合时，出现了一些问题，结果导致，在进行图片上传时出现如下提示：&lt;br&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/06/10/VyHALd.png&quot; alt&gt;&lt;br&gt;上网查询了很多相
      
    
    </summary>
    
      <category term="java" scheme="http://xiaoxin101.github.io/categories/java/"/>
    
    
      <category term="第三方对接" scheme="http://xiaoxin101.github.io/tags/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%AF%B9%E6%8E%A5/"/>
    
  </entry>
  
  <entry>
    <title>文件批量重命名</title>
    <link href="http://xiaoxin101.github.io/2019/06/06/test/"/>
    <id>http://xiaoxin101.github.io/2019/06/06/test/</id>
    <published>2019-06-06T10:23:26.514Z</published>
    <updated>2019-06-10T09:16:43.974Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件批量重命名"><a href="#文件批量重命名" class="headerlink" title="文件批量重命名"></a><strong>文件批量重命名</strong></h1><ol><li>进入需要重命名的文件夹内，新建一个.txt文件，内容为 dir *.jpg /b&gt;ren.bat(假如你要重命名的是图片的话，只需要将jpg改为其他名称既可。)再改后缀名为.bat双击运行。</li><li>用记事本打开ren.bat文件复制文件里面的内容,打开excel，右击单元格A2，选择“选择性粘贴”，选着unicode文本，点击确定。<ul><li>假设学号在A列，姓名在B列，身份证号在C列等，则在第一条学生信息后的单元格中输入=”ren “ &amp;A2 &amp;”.jpg “ &amp; B2 &amp;”.jpg”</li><li>单击该单元格右下角填充按钮，扩充到所有学生，复制此列的内容。</li><li>新建一个记事本，粘贴复制的内容，得到的就是文件重命名的Dos命令。</li><li>将该文件保存到学生照片文件加下面，将扩展名改为.bat，双击该文件，就会自动将图片重命名为以身份证号命名的图片</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;文件批量重命名&quot;&gt;&lt;a href=&quot;#文件批量重命名&quot; class=&quot;headerlink&quot; title=&quot;文件批量重命名&quot;&gt;&lt;/a&gt;&lt;strong&gt;文件批量重命名&lt;/strong&gt;&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;进入需要重命名的文件夹内，新建一个.txt文件，内容为
      
    
    </summary>
    
      <category term="工具" scheme="http://xiaoxin101.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="file" scheme="http://xiaoxin101.github.io/tags/file/"/>
    
  </entry>
  
  <entry>
    <title>神箭手云爬虫</title>
    <link href="http://xiaoxin101.github.io/2019/06/06/%E7%A5%9E%E7%AE%AD%E6%89%8B%E4%BA%91%E7%88%AC%E8%99%AB/"/>
    <id>http://xiaoxin101.github.io/2019/06/06/神箭手云爬虫/</id>
    <published>2019-06-06T04:04:18.153Z</published>
    <updated>2019-06-06T09:45:10.576Z</updated>
    
    <content type="html"><![CDATA[<p>分为：  入口页，帮助页，内容页</p><p>入口页： scanUrl     爬虫网页的入口</p><p>帮助页：helperurl  一帮包含大量的内容页（列表），多数情况下事业个内容列表，也叫列表页<br>contentUrl队列：此队列中存放内容页类型的链接，自动链接发现以及site.addUrl的时候，通过正则表达式来判断链接类型，如果是内容页，则将会加到此链接中</p><p>普通队列：一般存放的都是帮助页类型的链接，自动链接发现以及site.addUrl 的时候，通过正则表达式来判断链接类型，如果不是内容页，将会加到此队列中</p><p> 失败队列：一种特殊的队列，用来存放处理失败的链接。</p><h2 id="链接调度"><a href="#链接调度" class="headerlink" title="链接调度"></a><strong>链接调度</strong></h2><p>一次调度一个链接：默认情况下<br>contentUrl队列&gt;普通队列&gt;scanUrl队列</p><p>当configs.entriesFirst为true时，调度优先级为：<br>scanUrl队列&gt;contentUrl队列&gt;普通队列</p><p>在链接调度过程中，如果遇到了处理失败的情况： 首先会触发链接的重试（此链接会被重新加载到队列中），当重试次数（入口页：5次；帮助页：3次；内容页2次）仍然失败时，此链接就会被放到失败链接，当其他所有队列都为空时，失败队列里面的链接再重试一次，这些链接重试完成后，爬虫结束。</p><h2 id="链接去重"><a href="#链接去重" class="headerlink" title="链接去重"></a><strong>链接去重</strong></h2><p>网站之中链接存在循环，爬虫在爬去的过程中，如果不做控制，很容易陷入死循环。</p><p>比较好的方式就是对已经处理过的链接做标记，进行去重处理，（因为大部分处理过的链接不需要再处理一次，另一方面避免爬虫进入死循环）</p><p>对于GET类型的请求：平台使用链接本身去重，但是!!!!平台不会对#做处理，</p><a id="more"></a><p><a href="http://www.baidu.com/" target="_blank" rel="noopener">www.baidu.com/</a> 和 <a href="http://www.baidu.com/#" target="_blank" rel="noopener">www.baidu.com/#</a> 是两个不同的链接</p><p>对于POST请求，使用链接+参数的方式去重，也就是说对于同一链接，如果post的参数不一样，平台会认为是两个不同的链接<br>==HTTP的header不会作为去重的依据==</p><h2 id="爬虫的生命周期"><a href="#爬虫的生命周期" class="headerlink" title="爬虫的生命周期"></a>爬虫的生命周期</h2><p><img src="https://s2.ax1x.com/2019/06/06/VaMoIU.png" alt="爬虫生命周期"></p><h2 id="链接生命周期"><a href="#链接生命周期" class="headerlink" title="链接生命周期"></a>链接生命周期</h2><p><img src="https://s2.ax1x.com/2019/06/06/VawCHe.png" alt="爬虫生命周期"></p><p>configs对象<br>  configs属性：<br>domains    String 数组   不可为空<br>    定义爬虫爬去哪些域名下的网页，链接发现的时候会检查链接的域名，如果不是这些域名下的链接，则会被忽略。<br>       scanUrl     String 数组<br>   爬虫入口的链接，这是给爬虫添加入口的简单方式，这种方式添加的都是GET方式的请求。<br> 不设置此属性，在initCrawl回调函数中调用site.addScanUrl，也可以达到添加入口页链接的目的。<br>以下情况只能在initCrawl回调函数中调用site.addScanUrl才能实现：<br>1.如果需要添加POST请求的入口页链接，只能通过site.addScanUrl来添加。<br>2.scanUrls数组长度的限制是1000个，超过1000个的部分将会被忽略；这种情况需要把添加入口链接的工作放到initCrawl回调函数中来做。<br>         contentUrlRegexes  String 数组或正则数组<br>      定义内容页的链接正则，爬虫会根据这些正则来判断一个链接是否是内容页链接。<br>可以使字符串形式的正则，也可以是javaScript的正则，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//写法一：js原生正则（建议使用这种写法）</span><br><span class="line">[/http:\/\/club2011\.auto\.163\.com\/post\/\d+\.html.*/]</span><br><span class="line">//写法二：正则的字符串形式</span><br><span class="line">[&quot;http://club2011\\.auto\\.163\\.com/post/\\d+\\.html.*&quot;]</span><br><span class="line">//写法三：通过字符串形式new一个js正则对象</span><br><span class="line">[new RegExp(&quot;http://club2011\\.auto\\.163\\.com/post/\\d+\\.html.*&quot;)]</span><br></pre></td></tr></table></figure><p>1.正则可以写多个，一个链接只要能匹配到其中的任意一个正则，该链接就会被认为是内容链接<br>2.不设置或设置为空数组，则所有的链接都是内容页链接。<br>helperUrlRegexes String数组或正则数组<br>    定义帮助页的链接正则，爬虫会根据这些正则来判断一个链接是否是帮助页链接。<br>属性同内容页正则属性相同；<br>fields filed对象或数组 不可为空<br>定义爬取结构的数据字段，一个field定义出一个字段。</p><h2 id="interval-整数"><a href="#interval-整数" class="headerlink" title="interval  整数"></a>interval  整数</h2><p>两个链接之间的处理间隔，单位是毫秒，默认值是1000，既1秒。可设置的最小值是1000.<br> 一般保持默认值即可，如果反扒严重，可适当加大此值。</p><h2 id="timeout-整数"><a href="#timeout-整数" class="headerlink" title="timeout 整数"></a>timeout 整数</h2><pre><code>每个请求的默认超时时间。单位是毫秒，默认值是5000，即5秒。</code></pre><p>   一般保持默认值即可，如果目标网站比较卡，经常超时，可以适当加大此值，如果设置过小，会导致所有的请求都超时。<br>注意：！1.这是全局超时时间，对于没有特殊指定超时时间的请求，超时时间都是这个值。<br>2.对于开启自动Js渲染的页面，在渲染过程中会自动发出很多其他js，css等的请求，这些请求的超时时间都是这个值（（既这个值代表了超时的所有的时长  ））</p><h2 id="enableJS-布尔类型"><a href="#enableJS-布尔类型" class="headerlink" title="enableJS 布尔类型"></a>enableJS 布尔类型</h2><pre><code>是否默认开启自动Js渲染。默认值是false。</code></pre><p>这是一个全局设置，在处理具体的请求时，如果该请求有设置options.enableJS，则此值被覆盖。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var configs = &#123;</span><br><span class="line">  enableJS: false</span><br><span class="line">&#125;;</span><br><span class="line">configs.initCrawl = function(site) &#123;</span><br><span class="line">  site.addUrl(&quot;http://www.baidu.com&quot;);//该请求不会自动JS渲染</span><br><span class="line">  site.addUrl(&quot;http://tieba.baidu.com&quot;, &#123;</span><br><span class="line">    enableJS: true</span><br><span class="line">  &#125;);//该请求将会自动JS渲染</span><br><span class="line"></span><br><span class="line">  site.requestUrl(&quot;http://music.baidu.com&quot;);//该请求不会自动JS渲染</span><br><span class="line">  site.requestUrl(&quot;http://index.baidu.com&quot;, &#123;</span><br><span class="line">    enableJS: true</span><br><span class="line">  &#125;);//该请求将会自动JS渲染</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var configs = &#123;</span><br><span class="line">  enableJS: true</span><br><span class="line">&#125;;</span><br><span class="line">configs.initCrawl = function(site) &#123;</span><br><span class="line">  site.addUrl(&quot;http://www.baidu.com&quot;, &#123;</span><br><span class="line">    enableJS: false</span><br><span class="line">  &#125;);//该请求不会自动JS渲染</span><br><span class="line">  site.addUrl(&quot;http://tieba.baidu.com&quot;);//该请求将会自动JS渲染</span><br><span class="line"></span><br><span class="line">  site.requestUrl(&quot;http://music.baidu.com&quot;, &#123;</span><br><span class="line">    enableJS: false</span><br><span class="line">  &#125;);//该请求不会自动JS渲染</span><br><span class="line">  site.requestUrl(&quot;http://index.baidu.com&quot;);//该请求将会自动JS渲染</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="JsEngine-枚举类型"><a href="#JsEngine-枚举类型" class="headerlink" title="JsEngine 枚举类型"></a>JsEngine 枚举类型</h2><pre><code>使用哪种JS引擎来渲染页面。默认值为JSEngine.PhantomJS</code></pre><ul><li>JSEngine.PhantomJs 使用phantomjs作为渲染引擎</li><li>JSEngine.HtmlUnit 使用HtmlUnit作为渲染引擎</li></ul><p>注：！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.HtmlUnit目前兼容性相对差一些</span><br><span class="line">     2.phantomjs单个网页最长渲染2分钟</span><br><span class="line">entriesFirst 布尔类型</span><br><span class="line">     是否优先处理待爬队列中的scanUrl队列，默认值是false</span><br><span class="line">userAgent 枚举类型</span><br><span class="line">     爬虫在发请求时使用的UserAgent类型。默认值为userAgent.Computer</span><br><span class="line">UserAgent.Computer 使用电脑浏览器的UserAgent</span><br><span class="line">UserAgent.Android 使用Android手机的UserAgent</span><br><span class="line">UserAgent.iOS 使用苹果手机的UserAgent</span><br><span class="line">UserAgent.Mobile 使用手机的UserAgent</span><br><span class="line">UserAgent.Empty 不使用UserAgent</span><br></pre></td></tr></table></figure><h2 id="acceptHttpStatus-整数数组"><a href="#acceptHttpStatus-整数数组" class="headerlink" title="acceptHttpStatus 整数数组"></a>acceptHttpStatus 整数数组</h2><pre><code>添加下载网页时可以接受的HTTP返回码。默认接收的返回码包括200、201、202、203、204、205、206、207、208、226、301、302，通过此属性添加可以接受的返回码。</code></pre><p>autoFindUrls 布尔类型<br>    是否自动发现链接。默认值为true。此值实际上只影响onProcessScanPage，onPrcessHelperPage,onProcessContentPage这三个回调函数的默认返回值，最终是否会自动发现链接，还是由着三个回调函数的返回值决定的</p><h2 id="field对象"><a href="#field对象" class="headerlink" title="field对象"></a>field对象</h2><p>name String 类型 不可为空<br>注意：！<br>    1.名字中不能包含英文句点，既.。<br>    2.同意层级名字不能重复。<br>    3.为了更好的兼容性（尤其是数据库发布，名字建议不要使用中文，命名尽量符合变量名（标识符）的命名规则）<br>    4.此值讲作为抽取项的标识，如果中途做了修改，将导致之前的数据无法读出该字段。</p><h2 id="alias-String-类型"><a href="#alias-String-类型" class="headerlink" title="alias String 类型"></a>alias String 类型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">     抽取项的别名：一般起中文别名，方便数据查看，只影响网页的显示，课随意修改</span><br><span class="line"></span><br><span class="line">selectorType 枚举类型</span><br><span class="line">      抽取规则的类型，默认值是selectorType.XPath</span><br><span class="line"></span><br><span class="line">SelectorType.XPath 一般针对html网页或xml</span><br><span class="line">SelectorType.JsonPath 针对json数据</span><br><span class="line">SelectorType.Regex 可以针对一切文本</span><br></pre></td></tr></table></figure><h2 id="selector-String-类型"><a href="#selector-String-类型" class="headerlink" title="selector String 类型"></a>selector String 类型</h2><pre><code>抽取规则</code></pre><p>   注意：<br>如果selector为空或者未设置，则抽取的值为null，在进行required的判定之前，仍会进行afterExtractField回调。</p><p>required 布尔类型<br>     标识当前抽取项的值是否必须（不能为空），默认是false，可以为空<br> 抽取过程中，如果某个不能为控制的抽取项，抽取出来的结果是空值，则当前网页的数据抽取会立即结束，抽取结果会被丢弃<br>   注意：！<br>1.抽取规则可以抽取多条，但是repeated是false，最终的值是抽取结果里面的第一个。<br>2.抽取队则只抽取一条，但是repeated是true，那么抽取结果还是数组，数组值包含一个元素。</p><p>children field对象数组<br>     抽取项的子抽取项。<br>    field支持子项，可以设置多层级，方便数据以本身的层级方式存储，而不是全部展开到第一层级。<br> 注意：！<br>第一层field默认从当前网页内容中抽取，而子项默认从父项的内容中抽取。</p><p>primaryKey 布尔类型<br>     当前抽取项是否作为整条数据的主键组成部分，默认是false。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分为：  入口页，帮助页，内容页&lt;/p&gt;
&lt;p&gt;入口页： scanUrl     爬虫网页的入口&lt;/p&gt;
&lt;p&gt;帮助页：helperurl  一帮包含大量的内容页（列表），多数情况下事业个内容列表，也叫列表页&lt;br&gt;contentUrl队列：此队列中存放内容页类型的链接，自动链接发现以及site.addUrl的时候，通过正则表达式来判断链接类型，如果是内容页，则将会加到此链接中&lt;/p&gt;
&lt;p&gt;普通队列：一般存放的都是帮助页类型的链接，自动链接发现以及site.addUrl 的时候，通过正则表达式来判断链接类型，如果不是内容页，将会加到此队列中&lt;/p&gt;
&lt;p&gt; 失败队列：一种特殊的队列，用来存放处理失败的链接。&lt;/p&gt;
&lt;h2 id=&quot;链接调度&quot;&gt;&lt;a href=&quot;#链接调度&quot; class=&quot;headerlink&quot; title=&quot;链接调度&quot;&gt;&lt;/a&gt;&lt;strong&gt;链接调度&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;一次调度一个链接：默认情况下&lt;br&gt;contentUrl队列&amp;gt;普通队列&amp;gt;scanUrl队列&lt;/p&gt;
&lt;p&gt;当configs.entriesFirst为true时，调度优先级为：&lt;br&gt;scanUrl队列&amp;gt;contentUrl队列&amp;gt;普通队列&lt;/p&gt;
&lt;p&gt;在链接调度过程中，如果遇到了处理失败的情况： 首先会触发链接的重试（此链接会被重新加载到队列中），当重试次数（入口页：5次；帮助页：3次；内容页2次）仍然失败时，此链接就会被放到失败链接，当其他所有队列都为空时，失败队列里面的链接再重试一次，这些链接重试完成后，爬虫结束。&lt;/p&gt;
&lt;h2 id=&quot;链接去重&quot;&gt;&lt;a href=&quot;#链接去重&quot; class=&quot;headerlink&quot; title=&quot;链接去重&quot;&gt;&lt;/a&gt;&lt;strong&gt;链接去重&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;网站之中链接存在循环，爬虫在爬去的过程中，如果不做控制，很容易陷入死循环。&lt;/p&gt;
&lt;p&gt;比较好的方式就是对已经处理过的链接做标记，进行去重处理，（因为大部分处理过的链接不需要再处理一次，另一方面避免爬虫进入死循环）&lt;/p&gt;
&lt;p&gt;对于GET类型的请求：平台使用链接本身去重，但是!!!!平台不会对#做处理，&lt;/p&gt;
    
    </summary>
    
      <category term="神箭手" scheme="http://xiaoxin101.github.io/categories/%E7%A5%9E%E7%AE%AD%E6%89%8B/"/>
    
    
      <category term="爬虫" scheme="http://xiaoxin101.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
</feed>
